#!/bin/bash

# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# https://dinglab.wustl.edu/

read -r -d '' USAGE <<'EOF'
Cromwell Query: Print out per-case run statistics. Specific to cromwell runs registered with MGI Cromwell database

Usage:
  cq [options] [ CASE1 [CASE2 ...] ]

Options:
-h: Print this help message
-1: Stop after one
-k CASES_FN: file with list of all cases, one per line, used when CASE1 not defined. Default: dat/cases.dat
-q QUERY: type of query, one of 'status', 'logs', 'workflowRoot', 'timing', 'output', 'runlog', 'url'.  Default is `status`
-s STEP: define step of interest for use with 'logs' query
-V: output status only (i.e., squelch case and workflow ID output)
-Q: skip cases were WorkflowID is Unknown or Unassigned

Example usage - specifying cases:
* `cq` - will return status for all cases defined in `dat/cases.dat`
* `cq CASE1 CASE2 CASE3` - returns status of runs for three cases.  TODO: discuss how this looked up
* `cq WID1 WID2` - returns status for two runs with given WorkflowIDs


If CASE is - then read CASE from STDIN.  If CASE is not defined, read from CASES_FN file.
If CASE is a WorkflowID, treat it as such, without relying on output files - TODO: discuss/implement runlog

Evaluates the following information for each case
* The workflow ID of the cromwell job
* Various queries from https://genome-cromwell.gsc.wustl.edu/  Supported queries:
    * status - Status of run
    * wid - Workflow ID
    * logs - List of stderr/stdout for each run.  All steps shown unless -s STEP is defined
    * workflowRoot - Path to root of cromwell output
    * timing - URL to visualize timing and progress of workflow
    * output - Output VCF of TinDaisy run
    * runlog - Output status, start, end times
    * url - print URL of Cromwell server and quit.  This is a hardcoded value, but useful to know for manual queries

Workflow ID associated with given cromwell output file is obtaining by grepping for output line like,
[2019-04-14 15:54:01,69] [info] SingleWorkflowRunnerActor: Workflow submitted d6c83416-af3f-46f3-a892-ff1e9074fe74

Note that this script requires `jq` to be installed: https://stedolan.github.io/jq/download/
EOF

source cromwell_utils.sh

# hardcoded for now
CROMWELL_URL="https://genome-cromwell.gsc.wustl.edu"
CURL_ARG="-k"   # arguments passed to all cromwell db calls 


# Defaults
CASES_FN="dat/cases.dat"
QUERY="status"

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":h1k:q:s:VU" opt; do
  case $opt in
    h)
      echo "$USAGE"
      exit 0
      ;;
    1) # Stop after 1
      JUST_ONCE=1
      ;;
    k) 
      CASES_FN="$OPTARG"
      ;;
    q) 
      QUERY="$OPTARG"
      ;;
    s) 
      STEP="$OPTARG"
      ;;
    V) 
      STATUS_ONLY=1
      ;;
    U) 
      NO_UNKNOWN=1
      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG"
      echo "$USAGE"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument."
      echo "$USAGE"
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))


function get_status {
    WID=$1
    URL="$CROMWELL_URL/api/workflows/v1/$WID/status"
    R=$( curl $CURL_ARG -s -X GET $URL -H "accept: application/json" )
    test_exit_status
    # from /Users/mwyczalk/Projects/Rabix/somatic_sv_workflow/src/make_analysis_summary.sh
    # extract result path from YAML-format result file using `jq` utility, and confirm that it exists
    S=$( echo $R | jq -r '.status' )
    test_exit_status
    echo $S
}

function get_logs {
    WID=$1
    R=$( curl $CURL_ARG -s -X GET "$CROMWELL_URL/api/workflows/v1/$WID/logs" -H "accept: application/json" )
    test_exit_status
    # from /Users/mwyczalk/Projects/Rabix/somatic_sv_workflow/src/make_analysis_summary.sh
    # extract result path from YAML-format result file using `jq` utility, and confirm that it exists
    if [ -z $STEP ]; then
        FILTER=".calls"
    else
        FILTER=".calls.${STEP}[0]"
    fi
    S=$( echo "$R" | jq -r "$FILTER" )
    test_exit_status
    echo "$S"
}

function get_workflowRoot {
    WID=$1
    R=$( curl $CURL_ARG -s -X GET "$CROMWELL_URL/api/workflows/v1/$WID/metadata" -H "accept: application/json" )
    test_exit_status
    S=$( echo "$R" | jq -r '.workflowRoot' )
    test_exit_status
    echo "$S"
}

function get_output {
    WID=$1
    R=$( curl $CURL_ARG -s -X GET "$CROMWELL_URL/api/workflows/v1/$WID/outputs" -H "accept: application/json" )
    test_exit_status
    S=$( echo "$R" | jq -r '.outputs."tindaisy.cwl.output_vcf".location' )
    test_exit_status
    echo "$S"
}

# runlog returns the fields,
# status, start, end
function get_runlog {
    WID=$1
    STATUS=$(get_status $WID)
    test_exit_status

    START=$( curl $CURL_ARG -s -X GET "$CROMWELL_URL/api/workflows/v1/$WID/metadata" -H "accept: application/json" | jq -r '.start')
    test_exit_status
    END=$( curl $CURL_ARG -s -X GET "$CROMWELL_URL/api/workflows/v1/$WID/metadata" -H "accept: application/json" | jq -r '.end')
    test_exit_status
    printf "$STATUS\t$START\t$END"
}

# this allows us to get case names in one of three ways:
# 1: cq CASE1 CASE2 ...
# 2: cat cases.dat | cq -
# 3: read from CASES file
# Note that if no cases defined, assume CASE='-'
if [ "$#" == 0 ]; then
    confirm $CASES_FN
    CASES=$(cat $CASES_FN)
elif [ "$1" == "-" ] ; then
    CASES=$(cat - )
else
    CASES="$@"
fi

# loop over all cases, obtain WID and database status
# If log file does not exist, assume that the run has not started
for CASE in $CASES; do

    # Skip comments
    [[ $CASE = \#* ]] && continue

    WID=$( getWID $CASE )
    test_exit_status

    # Get status for various queries, but avoid db queries to server if WID unknown / unassigned
    if [[ $WID == "Unknown" ]] || [[ $WID == "Unassigned" ]]; then
        if [ "$NO_UNKNOWN" ]; then
            continue
        fi
        STATUS="Unknown"
    else
        if [ "$QUERY" == 'logs' ]; then
            STATUS=$(get_logs $WID)
            STATUS=$(printf "\n$STATUS")
        elif [ "$QUERY" == 'status' ]; then
            STATUS=$(get_status $WID)
        elif [ "$QUERY" == 'wid' ]; then
            STATUS=$WID
        elif [ "$QUERY" == 'workflowRoot' ]; then
            STATUS=$(get_workflowRoot $WID)
        elif [ "$QUERY" == 'timing' ]; then
            # URL as provided by tmooney on slack 
            STATUS="$CROMWELL_URL/api/workflows/v1/$WID/timing"
        elif [ "$QUERY" == 'output' ]; then
            STATUS=$(get_output $WID)
        elif [ "$QUERY" == 'runlog' ]; then
            STATUS=$(get_runlog $WID)
        elif [ "$QUERY" == 'url' ]; then
            echo $CROMWELL_URL
            exit 0
        else 
            >&2 echo ERROR: Unknown query $QUERY
            >&2 echo "$USAGE"
            exit 1
        fi
    fi

    if [ -z $STATUS_ONLY ]; then
        printf "$CASE\t$WID\t$STATUS\n" 
    else
        printf "$STATUS\n" 
    fi

    if [ $JUST_ONCE ]; then
        >&2 echo Stopping after one
        break
    fi

done 




